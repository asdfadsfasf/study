공학의 특성
- 제약 사항 : 정해진 기간, 주어진 비용
	과학적 지식을 활용하여 문제를 해결하는데 한정된 기간과 비용의 제약을 받음

소프트웨어 공학의 목적
- S/W 개발의 어려움 해결
- 효율적 개발을 통한 생산성 향상
- 고품질 소프트웨어 제품 생산하여 사용자 만족

소프트웨어 개발 생명주기(SDLC : Software Development Life Cycle)
	계획 - 요구분석 - 설계 - 구현 - 테스트 - 유지보수

소프트웨어 공학
- 정의 : 품질 좋은 소프트웨어를 경제적으로 개발하기 위해 계획을 세우고, 개발하며,
	   유지 및 관리하는 전 과정에서 공학, 과학 및 수학적 원리와 방법을 적용하여,
	   필요한 이론과 기술 및 도구들에 관해 연구하는 학문


소프트웨어 개발 단계
- 소프트웨어 개발 프로세스
- 품질 관리
- 프로젝트 관리(형상 관리)
	프로젝트관리지식체계(PMBOK)
	졸작 관련 관리 : 통합, 범위, 일정, 의사소통 관리(품질?, 인적자원?)

계획
- 개발 비용 산정
- 일정 계획 : 작업분할구조도, CPM 사용
- 위험 관리

요구분석
- 기존 시스템의 문제점 파악 -> 새로운 요구사항 도출 -> 다이어그램 작성
- 개발 방법론에 따른 표현 도구
	구조적 방법론 : DFD, DD, Mini Spec
	정보공학 방법론 : E-R 다이어그램
	객체지향 방법론 : UML의 유스케이스 다이어그램
- 최종 산출물 : 요구 분석 명세서

설계
- 설계 원리 : 분할과 정복, 추상화, 단계적 분해, 모듈화, 정보은닉
- 소프트웨어 아키텍처, 객체지향 설계
- 아키텍처 스타일
- GoF의 디자인 패턴
- 모듈 평가 기준 : 응집도와 결합도

구현
- 간략한 프로그래밍 언어의 역사
- 표준 코딩 규칙

테스트
- 개발자 또는 사용자 시각에 따른 분류
- 사용되는 목적에 따른 분류
- 품질 특성에 따른 분류
- 소프트웨어 개발 단계에 따른 분류

유지보수
- 수정, 적응, 기능보강, 예방 유지보수



