소프트웨어가 사용되는 곳
- 스마트폰, 노트북, 금융, 의료, 항공기, 건물, 자동차 등등

프로그램과 소프트웨어
-프로그램
	원시코드(소스코드) : C언어, Java, Python

-소프트웨어
	원시코드
	모든 산출물(자료구조, DB구조, 테스트 결과 등)
	각 단계마다 생산되는 문서
	사용자 매뉴얼

- 프로그램 뿐만 아니라 그 이상의 것도 포함하는 포괄적인 개념

소프트웨어의 특징
- 제조가 아닌 개발
	제조 : 정해진 틀에 맞춰 일정하게 생산, 많은 인력 필요, 능력별 결과물 차이 근소
	개발 : 개인 능력별 결과물 차이 매우 큼

- 소모가 아닌 품질 저하
	H/W : 오래 사용하면 부품이 닳고, 고장 발생 빈도 높고, 기능 떨어짐
	S/W : 오래 사용해도 닳지 않고, 고장 발생 빈도 낮고, 기능 동일

H/W 실패 곡선 특징
- 초기 실패율 높음 -> 오류 해결 -> 오랜 기간 사용 -> 환경 문제 발생 -> 다시 실패율 증가

이상적인 소프트웨어 실패 곡선
- 이상적인 상황 : 개발 완료 후 변경 사항, 환경 변화 없어야함
- 발견되지 않은 오류로 초기 실패율 높음 -> 오류 해결 -> 오랜 기간 동안 사용

실제 소프트웨어 실패 곡선
- 초기 실패율 높음 -> 오류 해결 -> 실패율 낮음 -> 기능 추가 및 수정 -> 변경으로 인한 부작용 -> 실패율 급격히 증가

소프트웨어의 당면 과제
- 소프트웨어 개발의 느린 발전 속도
	H/W의 발전 : PC 및 스마트폰의 발전 속도(크기, 속도, 성능)
	S/W 발전 속도: DOS ~ Windows 10

- 새로운 소프트웨어에 대한 사용자 요구의 증가
	S/W 발전 속도가 미처 따라가지 못함
	
	H/W와 S/W의 개발 방법의 근본적 차이
		H/W : 검증 받은 부품을 조립하는 형태의 생산
		S/W : 처음부터 만들어가는 개발 형태
	해결 방안 : CBD개발 방법론(부품 간 개발로 소프트웨어를 개발, 쉽지않음)

- 관리 기술의 부분적 활용
	기계 : 닦고, 조이고, 기름치고 -> 수명 연장

	S/W 개발에도 관리가 필요
		비용, 일정, 개발자 관리
		도구를 활용한 적극적인 프로젝트 관리 필요

소프트웨어 개발의 어려움 / 소프트웨어 공학의 해결방안 제시
- 개발 과정 복잡함 (개발의 복잡함을 줄이기 위한 방법과 기술 제시)
- 참여 인력이 많음 (개발에 참여하는 팀을 구성하고 관리하는 효율적인 방법 제시)
- 개발 기간이 긺	  (프로젝트를 효율적으로 관리하기 위한 프로젝트관리지식체계를 소개)
